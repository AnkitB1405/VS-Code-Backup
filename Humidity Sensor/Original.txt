#include <Arduino.h>

#define SENSOR 2      // DHT22 sensor pin
#define RELAY 3       // Relay pin
#define HUMID_LIMIT 30 // Humidity threshold

void startSensor();
int getSensorData(unsigned char info[5]);
float checkHumidity();

void setup() {
    Serial.begin(9600);
    pinMode(RELAY, OUTPUT);
}

void loop() {
    delay(2000); // Wait before reading again

    float humidity = checkHumidity();

    if (humidity < 0) {
        Serial.println("Sensor error!");
        return;
    }

    if (humidity < HUMID_LIMIT) {
        digitalWrite(RELAY, HIGH);  // Turn ON relay
        Serial.print("Low Humidity: ");
    } else {
        digitalWrite(RELAY, LOW);   // Turn OFF relay
        if (humidity > 60) {
            Serial.print("Warning! Too much humidity: ");
        }
    }

    Serial.print(humidity);
    Serial.println("%");
}

void startSensor() {
    pinMode(SENSOR, OUTPUT);
    digitalWrite(SENSOR, LOW);
    delay(1); // Keep it LOW for >1ms
    digitalWrite(SENSOR, HIGH);
    delayMicroseconds(30);
    pinMode(SENSOR, INPUT); // Switch back to reading mode
}

int getSensorData(unsigned char info[5]) {
    unsigned char byteNum = 0, bitNum = 7;
    unsigned long timeStart;

    // Wait for sensor to respond
    timeStart = micros();
    while (digitalRead(SENSOR) == HIGH) {
        if (micros() - timeStart > 80) return -1;
    }

    timeStart = micros();
    while (digitalRead(SENSOR) == LOW) {
        if (micros() - timeStart > 80) return -1;
    }

    timeStart = micros();
    while (digitalRead(SENSOR) == HIGH) {
        if (micros() - timeStart > 80) return -1;
    }

    // Read 40 bits (5 bytes)
    for (int i = 0; i < 40; i++) {
        while (digitalRead(SENSOR) == LOW);

        timeStart = micros();
        while (digitalRead(SENSOR) == HIGH);
        unsigned long pulseTime = micros() - timeStart;

        if (pulseTime > 40) {
            info[byteNum] |= (1 << bitNum);
        }

        if (bitNum == 0) {
            bitNum = 7;
            byteNum++;
        } else {
            bitNum--;
        }
    }

    return 0; // Success
}

float checkHumidity() {
    unsigned char info[5] = {0}; // Store sensor values

    startSensor(); // Ask sensor for data

    if (getSensorData(info) != 0) return -1; // Error reading

    // Check if the data is valid
    if ((unsigned char)(info[0] + info[1] + info[2] + info[3]) != info[4]) return -1;

    // Process humidity info
    int humidRaw = (info[0] << 8) | info[1];
    return humidRaw / 10.0; // Convert to normal percentage
}